M

@stack_new ... Nil -> res_addr
    0 => res_addr
    Ret

@stack_push ... Nil -> val, Nil -> head
    old_addr = 'head

    new_addr = alloc 2

    new_addr => head
    old_addr => new_addr
    val => new_addr + 1
    Ret

@stack_pop ... Nil -> head, Nil -> res_addr
    old_addr = 'head
    P { old_addr == 0 } Ret |

    old_val = '(old_addr + 1)

    next_addr = 'old_addr
    next_addr => head
    0 => old_addr
    old_val => res_addr
    Ret

@stack_is_empty ... Nil -> head, Nil -> res_addr
    'head == 0 => res_addr
    Ret

@M ...
    Pg stack_new { s }
    printList s

    L { 1(1)5 => i } l1
        Pg stack_push { 'i, s }
    @l1 ...
    printList s

    Pg stack_is_empty { s, s_em }
    L { 0(1) P { 's_em /= 1 } => pi } l2
        Pg stack_pop { s, top_val }
        print 'top_val
        printList s
        Pg stack_is_empty { s, s_em }
    @l2 ...