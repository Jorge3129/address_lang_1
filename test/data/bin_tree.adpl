list1 = [10, 5, 2, 15, 8, 0.0, -200]
printList list1

Pg from_list { list1, root }
Pg to_list { 'root, tree_list }

printList tree_list

!

@create_root ... Nil => val, Nil => res_addr
    c1 = (alloc 2) + 0
    ptr(0) => c1 + 0
    'val => c1 + 1
    c1 => 'res_addr
    Ret

@create_child ... Nil => val, Nil => parent_addr, Nil => res_addr
    c1 = (alloc 2) + 0
    ptr('parent_addr) => c1 + 0
    'val => c1 + 1
    c1 => 'res_addr
    Ret

@find_children ... Nil => node, Nil => left_addr, Nil => right_addr
    node_addr = 'node
    node_val = '(node_addr + 1)

    children = getRefs node_addr
    left = 0
    right = 0
    L { 'children, 'Nil, P { 'i /= 0 } => i } b
        child_addr = '('i + 1)
        child_val = '(child_addr + 1)
        P { child_val < node_val } left = child_addr | right = child_addr
    @b ...

    left => 'left_addr
    right => 'right_addr
    Ret

@insert ... Nil => val, Nil => node
    node_addr = 'node
    node_val = '(node_addr + 1)

    P { 'val == node_val } Ret |

    Pg find_children { node_addr, left, right }

    is_left = 'val < node_val

    P { is_left } cur_child = 'left | cur_child = 'right

    P { cur_child == 0 } case_create | case_insert
    @case_create ...
        Pg create_child { 'val, node_addr, cur_child_new }
        end
    @case_insert ...
        Pg insert { 'val, cur_child }
        end

    @end ...
    Ret

@traverse ... Nil => node
    node_addr = 'node
    node_val = '(node_addr + 1)

    Pg find_children { node_addr, left, right }

    P { 'left /= 0 } case_left | case_left_end
    @case_left ...
        Pg traverse { 'left }
    @case_left_end ...

    print node_val

    P { 'right /= 0 } case_right | case_right_end
    @case_right ...
        Pg traverse { 'right }
    @case_right_end ...
    Ret

@to_list ... Nil => node, Nil => res_addr
    Pg list_empty { 'res_addr }
    Pg to_list_helper { 'node, 'res_addr }
    Ret

@to_list_helper ... Nil => node, Nil => list_addr
    node_addr = 'node
    node_val = '(node_addr + 1)

    Pg find_children { node_addr, left, right }

    P { 'left /= 0 } case_left | case_left_end
    @case_left ...
        Pg to_list_helper { 'left, 'list_addr }
    @case_left_end ...

    Pg list_add { node_val, 'list_addr }

    P { 'right /= 0 } case_right | case_right_end
    @case_right ...
        Pg to_list_helper { 'right, 'list_addr }
    @case_right_end ...
    Ret

@from_list ... Nil => list_addr, Nil => res_addr
    h = 'list_addr
    root = 'res_addr

    P { 'h == 0 } 0 => root; Ret |

    head = '('h + 1)
    Pg create_root { head, root }
    
    L { ''h, 'Nil, P { 'i /= 0 } => i } b
        val = '('i + 1)
        Pg insert { val, 'root }
    @b ...
    Ret

// Lists
@list_empty ... Nil => targetAddr
    0 => 'targetAddr
    Ret

@list_add ... Nil => val, Nil => listAddr
    h = 'listAddr
    P { 'h == 0 } then | else
    @then ...
        curAddr = h;
        end
    @else ...
        L { 'h, 'Nil, P { ''j /= 0 } => j } l1
        @l1 ...
        curAddr = 'j;
        end
    @end ...
        nextNode = alloc 2;
        nextNode => curAddr
        'val => nextNode + 1
    Ret